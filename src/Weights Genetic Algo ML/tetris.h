#ifndef TETRIS_H
#define TETRIS_H
#include <vector>
#include <random>
#include <chrono>
#include <algorithm>
#include <ctime>
#include <cmath>
#include <thread>
#include <iostream>
using namespace std;

vector<int> shapeOrder = {2, 5, 1, 3, 6, 4, 0, 4, 3, 1, 0, 2, 6, 5, 4, 5, 0, 1, 3, 2, 6, 6, 5, 4, 3, 1, 0, 2, 4, 2, 1, 0, 6, 3, 5, 3, 5, 4, 6, 0, 2, 1, 5, 6, 4, 0, 3, 1, 2, 2, 0, 5, 1, 4, 3, 6, 6, 5, 2, 1, 0, 3, 4, 6, 2, 0, 1, 5, 4, 3, 6, 4, 1, 3, 0, 5, 2, 5, 1, 4, 0, 2, 6, 3, 2, 6, 1, 0, 5, 3, 4, 0, 2, 6, 1, 4, 3, 5, 6, 2, 0, 4, 5, 1, 3, 0, 5, 4, 2, 6, 3, 1, 2, 6, 4, 1, 0, 5, 3, 5, 1, 3, 0, 4, 6, 2, 3, 2, 0, 4, 6, 1, 5, 3, 5, 6, 0, 1, 2, 4, 6, 5, 0, 2, 3, 1, 4, 1, 6, 3, 2, 4, 0, 5, 1, 5, 4, 2, 6, 3, 0, 0, 6, 2, 5, 3, 1, 4, 1, 6, 4, 3, 5, 0, 2, 6, 2, 1, 4, 0, 5, 3, 6, 4, 5, 2, 1, 3, 0, 6, 5, 0, 4, 3, 1, 2, 3, 6, 4, 2, 0, 1, 5, 1, 4, 2, 0, 3, 5, 6, 0, 3, 6, 1, 5, 4, 2, 3, 4, 6, 5, 0, 2, 1, 2, 0, 5, 3, 4, 6, 1, 3, 4, 0, 2, 1, 6, 5, 3, 5, 2, 0, 1, 4, 6, 3, 4, 6, 2, 1, 5, 0, 2, 1, 3, 5, 4, 0, 6, 0, 5, 4, 3, 1, 2, 6, 6, 2, 0, 5, 4, 1, 3, 2, 0, 3, 5, 4, 6, 1, 3, 2, 6, 1, 0, 5, 4, 4, 6, 0, 1, 3, 5, 2, 5, 0, 1, 3, 6, 4, 2, 6, 0, 3, 2, 4, 1, 5, 3, 1, 2, 6, 5, 0, 4, 4, 5, 0, 3, 1, 6, 2, 1, 5, 3, 2, 6, 0, 4, 1, 2, 0, 6, 3, 5, 4, 1, 0, 4, 6, 2, 3, 5, 0, 6, 1, 4, 2, 5, 3, 3, 0, 6, 2, 4, 5, 1, 6, 3, 5, 2, 1, 0, 4, 3, 0, 2, 5, 1, 4, 6, 0, 4, 2, 6, 5, 1, 3, 4, 6, 2, 1, 5, 0, 3, 6, 3, 4, 2, 1, 0, 5, 6, 3, 4, 1, 0, 5, 2, 5, 1, 0, 4, 3, 6, 2, 1, 5, 4, 6, 0, 3, 2, 3, 6, 5, 1, 2, 0, 4, 2, 1, 0, 4, 6, 5, 3, 5, 4, 0, 6, 2, 3, 1, 4, 3, 0, 5, 1, 2, 6, 1, 0, 2, 3, 6, 5, 4, 1, 4, 2, 3, 6, 5, 0, 6, 4, 3, 5, 1, 0, 2, 0, 3, 5, 6, 1, 2, 4, 1, 2, 5, 4, 0, 3, 6, 1, 0, 3, 4, 6, 5, 2, 0, 6, 4, 2, 1, 3, 5, 5, 2, 6, 1, 0, 3, 4, 0, 1, 4, 6, 5, 2, 3, 3, 0, 6, 1, 2, 4, 5, 4, 3, 0, 1, 6, 2, 5, 6, 2, 5, 4, 3, 0, 1, 5, 1, 4, 0, 3, 2, 6, 1, 6, 5, 3, 0, 4, 2, 1, 2, 0, 4, 6, 5, 3, 2, 6, 5, 0, 3, 1, 4, 3, 6, 2, 0, 5, 4, 1, 1, 0, 3, 6, 4, 2, 5, 2, 6, 0, 4, 3, 5, 1, 2, 4, 3, 0, 6, 1, 5, 3, 6, 5, 4, 1, 0, 2, 6, 0, 2, 5, 4, 1, 3, 3, 5, 4, 6, 2, 1, 0, 3, 1, 4, 2, 0, 5, 6, 4, 1, 6, 2, 0, 3, 5, 2, 4, 3, 0, 6, 1, 5, 5, 1, 0, 3, 6, 4, 2, 6, 1, 0, 2, 5, 3, 4, 2, 3, 1, 5, 6, 4, 0, 1, 2, 0, 5, 4, 6, 3, 6, 0, 4, 2, 1, 5, 3, 4, 2, 1, 0, 5, 3, 6, 0, 6, 3, 1, 5, 2, 4, 2, 1, 3, 4, 0, 5, 6, 4, 2, 0, 5, 1, 6, 3, 2, 1, 5, 6, 3, 4, 0, 5, 1, 3, 4, 2, 0, 6, 0, 5, 2, 1, 4, 3, 6, 2, 5, 0, 4, 1, 3, 6, 4, 2, 1, 3, 6, 5, 0, 5, 3, 0, 6, 2, 4, 1, 3, 1, 0, 2, 5, 4, 6, 5, 6, 3, 1, 2, 0, 4, 6, 0, 2, 3, 1, 5, 4, 4, 3, 2, 5, 0, 1, 6, 3, 4, 1, 6, 5, 0, 2, 6, 0, 2, 1, 4, 5, 3, 3, 6, 1, 0, 2, 5, 4, 5, 2, 1, 4, 3, 6, 0, 5, 0, 6, 2, 1, 3, 4, 4, 1, 3, 5, 2, 0, 6, 0, 4, 5, 1, 3, 6, 2, 6, 3, 2, 1, 5, 0, 4, 6, 2, 5, 0, 3, 4, 1, 0, 4, 3, 5, 1, 2, 6, 1, 0, 5, 6, 2, 4, 3, 6, 4, 2, 3, 1, 0, 5, 0, 4, 5, 1, 3, 6, 2, 6, 4, 0, 5, 1, 2, 3, 1, 4, 2, 0, 3, 6, 5, 2, 0, 3, 1, 5, 6, 4, 0, 4, 2, 5, 6, 3, 1, 4, 6, 5, 0, 1, 2, 3, 4, 2, 6, 5, 1, 3, 0, 1, 2, 4, 5, 3, 0, 6, 6, 5, 3, 0, 4, 2, 1, 1, 0, 4, 6, 3, 2, 5, 1, 3, 2, 5, 6, 4, 0, 6, 2, 4, 3, 0, 1, 5, 2, 3, 6, 0, 1, 5, 4, 5, 6, 1, 3, 0, 2, 4, 2, 5, 4, 1, 6, 0, 3, 0, 6, 2, 5, 1, 3, 4, 6, 3, 5, 4, 1, 0, 2, 5, 3, 2, 4, 6, 0, 1, 2, 4, 3, 1, 5, 6, 0, 1, 5, 4, 2, 6, 3, 0, 5, 3, 6, 4, 0, 2, 1, 0, 1, 5, 6, 4, 3, 2, 5, 6, 0, 4, 2, 1, 3, 0, 4, 3, 2, 5, 6, 1, 0, 1, 4, 3, 2, 5, 6, 5, 6, 0, 3, 2, 1, 4, 5, 0, 2, 6, 1, 3, 4, 0, 2, 1, 3, 5, 6, 4, 1, 5, 6, 3, 0, 2, 4, 0, 1, 4, 2, 6, 3, 5, 6, 0, 2, 5, 1, 4, 3, 6, 1, 0, 3, 5, 4, 2, 6, 4, 0, 2, 5, 3, 1, 2, 0, 1, 5, 3, 4, 6, 2, 6, 3, 4, 0, 1, 5, 1, 5, 2, 6, 4, 3, 0, 4, 1, 2, 0, 6, 3, 5, 5, 6, 0, 1, 3, 2, 4, 2, 5, 3, 1, 0, 6, 4, 5, 1, 6, 0, 2, 4, 3, 5, 0, 1, 2, 3, 4, 6, 5, 2, 1, 6, 4, 3, 0, 3, 2, 5, 4, 0, 1, 6, 5, 0, 1, 6, 3, 4, 2, 0, 5, 4, 3, 6, 1, 2, 5, 6, 3, 2, 0, 1, 4, 3, 6, 4, 5, 0, 1, 2, 4, 0, 2, 3, 5, 6, 1, 0, 5, 4, 6, 1, 2, 3, 6, 3, 5, 4, 0, 2, 1, 2, 3, 4, 5, 6, 0, 1, 0, 5, 1, 4, 6, 3, 2, 0, 4, 3, 1, 6, 5, 2, 5, 0, 6, 4, 1, 3, 2, 4, 0, 5, 2, 1, 3, 6, 4, 3, 6, 2, 5, 1, 0, 4, 2, 0, 3, 5, 1, 6, 5, 2, 6, 1, 4, 0, 3, 3, 0, 5, 4, 6, 2, 1, 5, 0, 4, 6, 2, 3, 1, 4, 5, 2, 1, 3, 0, 6, 0, 6, 2, 5, 1, 3, 4, 4, 6, 0, 5, 3, 2, 1, 5, 2, 3, 1, 6, 0, 4, 1, 5, 4, 6, 3, 2, 0, 3, 2, 5, 6, 0, 4, 1, 1, 3, 4, 2, 0, 5, 6, 5, 3, 6, 0, 1, 4, 2, 5, 1, 4, 3, 2, 6, 0, 3, 2, 0, 4, 5, 1, 6, 6, 5, 4, 1, 2, 0, 3, 2, 0, 5, 6, 1, 3, 4, 1, 3, 0, 5, 2, 6, 4, 4, 6, 1, 3, 2, 5, 0, 6, 0, 5, 1, 4, 3, 2, 5, 4, 2, 6, 1, 0, 3, 3, 1, 5, 0, 4, 6, 2, 0, 5, 1, 3, 2, 6, 4, 3, 1, 2, 5, 6, 4, 0, 3, 5, 2, 0, 6, 4, 1, 1, 2, 5, 4, 6, 3, 0, 3, 6, 2, 4, 0, 5, 1, 6, 1, 3, 2, 4, 5, 0, 6, 2, 1, 4, 5, 0, 3, 5, 1, 0, 6, 3, 2, 4, 5, 4, 2, 6, 0, 3, 1, 4, 6, 2, 5, 0, 3, 1, 1, 0, 3, 2, 5, 6, 4, 5, 0, 6, 1, 3, 2, 4, 3, 1, 5, 2, 4, 0, 6, 0, 1, 4, 5, 6, 3, 2, 0, 4, 5, 3, 6, 1, 2, 3, 4, 1, 2, 5, 0, 6, 4, 6, 3, 1, 0, 2, 5, 4, 0, 3, 1, 5, 6, 2, 4, 6, 3, 2, 1, 5, 0, 5, 0, 6, 1, 2, 3, 4, 2, 0, 4, 6, 1, 3, 5, 6, 2, 0, 1, 3, 5, 4, 5, 1, 3, 2, 4, 6, 0, 2, 3, 1, 4, 0, 5, 6, 4, 2, 3, 1, 6, 0, 5, 0, 5, 1, 2, 6, 3, 4, 1, 5, 3, 2, 6, 0, 4, 6, 2, 1, 3, 0, 4, 5, 1, 0, 6, 3, 2, 4, 5, 5, 0, 3, 6, 4, 1, 2, 6, 5, 0, 1, 4, 3, 2, 4, 3, 5, 1, 0, 2, 6, 4, 0, 6, 5, 1, 2, 3, 3, 6, 5, 4, 2, 1, 0, 5, 1, 3, 0, 2, 6, 4, 4, 5, 3, 6, 0, 2, 1, 3, 6, 2, 5, 4, 1, 0, 0, 1, 4, 5, 6, 2, 3, 5, 1, 4, 3, 0, 6, 2, 6, 5, 3, 1, 4, 0, 2, 6, 1, 4, 5, 2, 0, 3, 5, 3, 6, 0, 1, 4, 2, 5, 3, 4, 6, 2, 0, 1, 5, 3, 4, 0, 1, 6, 2, 0, 5, 2, 3, 4, 1, 6, 1, 5, 0, 6, 2, 4, 3, 1, 2, 3, 0, 5, 6, 4, 6, 3, 0, 2, 4, 5, 1, 1, 6, 3, 5, 2, 4, 0, 6, 5, 3, 4, 1, 0, 2, 2, 6, 0, 4, 5, 3, 1, 2, 1, 3, 0, 5, 4, 6, 1, 5, 2, 6, 4, 0, 3, 3, 0, 5, 1, 4, 6, 2, 2, 6, 5, 0, 1, 3, 4, 5, 6, 1, 4, 2, 0, 3, 0, 5, 2, 3, 4, 6, 1, 6, 2, 5, 1, 3, 4, 0, 2, 6, 1, 4, 5, 0, 3, 1, 3, 5, 6, 0, 2, 4, 0, 4, 3, 2, 6, 5, 1, 5, 3, 2, 1, 4, 6, 0, 0, 6, 5, 3, 2, 1, 4, 6, 1, 4, 3, 2, 5, 0, 5, 0, 1, 2, 3, 4, 6, 1, 6, 5, 4, 2, 3, 0, 0, 5, 1, 4, 3, 2, 6, 0, 5, 4, 1, 3, 2, 6, 5, 3, 1, 6, 4, 0, 2, 5, 6, 2, 1, 4, 0, 3, 6, 0, 1, 5, 2, 3, 4, 6, 0, 4, 2, 1, 5, 3, 3, 5, 4, 1, 6, 2, 0, 4, 0, 5, 1, 2, 6, 3, 0, 4, 6, 5, 1, 3, 2, 4, 5, 1, 2, 3, 6, 0, 2, 5, 3, 6, 0, 1, 4, 0, 5, 6, 2, 3, 1, 4, 4, 6, 5, 3, 2, 1, 0, 1, 3, 5, 2, 4, 0, 6, 6, 2, 3, 5, 0, 4, 1, 6, 3, 2, 1, 4, 5, 0, 1, 3, 6, 5, 2, 4, 0, 5, 6, 2, 0, 4, 3, 1, 5, 4, 3, 6, 2, 1, 0, 1, 0, 3, 5, 2, 4, 6, 6, 4, 2, 0, 5, 3, 1, 2, 3, 4, 0, 6, 1, 5, 4, 0, 2, 6, 5, 3, 1, 0, 6, 2, 1, 3, 5, 4, 4, 2, 5, 6, 0, 1, 3, 5, 0, 2, 4, 3, 1, 6, 5, 2, 3, 4, 0, 6, 1, 4, 0, 6, 1, 5, 2, 3, 5, 6, 3, 4, 2, 1, 0, 0, 4, 2, 1, 3, 6, 5, 3, 6, 5, 2, 1, 4, 0, 5, 3, 0, 6, 1, 4, 2, 1, 4, 3, 6, 5, 0, 2, 2, 5, 4, 6, 1, 3, 0, 0, 2, 5, 1, 6, 3, 4, 2, 6, 5, 1, 3, 4, 0, 2, 6, 1, 0, 3, 4, 5, 1, 2, 0, 5, 4, 3, 6, 2, 5, 1, 0, 6, 4, 3, 2, 3, 6, 0, 5, 4, 1, 0, 6, 3, 2, 5, 4, 1, 4, 5, 3, 1, 2, 6, 0, 6, 1, 4, 2, 0, 3, 5, 3, 4, 0, 5, 2, 6, 1, 0, 1, 5, 2, 4, 6, 3, 2, 4, 1, 6, 0, 3, 5, 1, 5, 3, 2, 0, 6, 4, 5, 4, 3, 2, 0, 6, 1, 4, 5, 6, 0, 1, 3, 2, 3, 2, 4, 6, 1, 0, 5, 1, 0, 2, 4, 6, 5, 3, 5, 2, 1, 3, 4, 6, 0, 2, 5, 6, 3, 4, 0, 1, 6, 3, 1, 4, 5, 0, 2, 2, 3, 0, 4, 1, 5, 6, 1, 6, 5, 3, 2, 4, 0, 6, 0, 2, 3, 4, 5, 1, 2, 1, 6, 4, 0, 3, 5, 3, 5, 4, 1, 0, 6, 2, 0, 2, 5, 1, 6, 4, 3, 4, 5, 6, 0, 3, 1, 2, 3, 4, 6, 2, 1, 0, 5, 5, 0, 4, 6, 3, 2, 1, 1, 0, 4, 3, 6, 5, 2, 4, 2, 3, 0, 5, 6, 1, 3, 5, 6, 2, 1, 4, 0, 5, 6, 3, 4, 2, 0, 1, 2, 6, 0, 1, 3, 5, 4, 4, 1, 3, 6, 0, 2, 5, 6, 1, 4, 2, 0, 5, 3, 4, 1, 0, 6, 3, 2, 5, 3, 5, 6, 1, 2, 0, 4, 2, 4, 1, 5, 0, 3, 6, 4, 5, 3, 2, 0, 1, 6, 1, 0, 3, 5, 2, 6, 4, 5, 2, 0, 4, 6, 3, 1, 0, 3, 5, 2, 1, 4, 6, 0, 4, 2, 1, 6, 5, 3, 1, 0, 6, 3, 2, 5, 4, 2, 6, 0, 1, 3, 4, 5, 0, 1, 3, 2, 4, 6, 5, 1, 2, 4, 5, 3, 0, 6, 1, 2, 6, 3, 4, 0, 5, 5, 0, 1, 4, 3, 2, 6, 1, 0, 5, 3, 2, 4, 6, 4, 5, 2, 1, 6, 0, 3, 2, 1, 5, 3, 4, 0, 6, 3, 2, 4, 1, 6, 0, 5, 2, 6, 1, 4, 5, 3, 0, 4, 2, 5, 1, 3, 0, 6, 3, 2, 0, 1, 5, 6, 4, 1, 3, 5, 0, 4, 2, 6, 5, 4, 1, 6, 3, 2, 0, 3, 5, 4, 6, 1, 0, 2, 3, 0, 4, 1, 5, 6, 2, 5, 6, 3, 0, 1, 2, 4, 4, 3, 6, 2, 5, 1, 0, 4, 0, 6, 1, 5, 3, 2, 5, 1, 6, 2, 3, 4, 0, 3, 5, 6, 1, 0, 2, 4, 1, 0, 5, 6, 2, 3, 4, 2, 6, 5, 0, 3, 4, 1, 3, 6, 0, 1, 4, 2, 5, 3, 5, 0, 1, 2, 6, 4, 3, 4, 6, 2, 5, 0, 1, 6, 5, 1, 2, 4, 0, 3, 1, 5, 4, 2, 0, 6, 3, 3, 4, 6, 5, 2, 0, 1, 0, 3, 2, 4, 1, 6, 5, 1, 6, 3, 4, 0, 2, 5, 1, 4, 5, 0, 6, 3, 2, 5, 0, 2, 3, 6, 4, 1, 6, 3, 4, 2, 5, 1, 0, 5, 0, 2, 6, 4, 3, 1, 3, 2, 4, 5, 1, 0, 6, 5, 4, 3, 1, 6, 2, 0, 5, 2, 3, 4, 1, 0, 6, 2, 4, 6, 1, 0, 5, 3, 5, 0, 4, 6, 3, 1, 2, 4, 3, 5, 2, 1, 0, 6, 6, 3, 4, 0, 1, 2, 5, 2, 1, 6, 0, 5, 3, 4, 1, 2, 4, 0, 6, 3, 5, 2, 4, 1, 0, 6, 3, 5, 4, 3, 0, 6, 5, 1, 2, 5, 4, 3, 6, 2, 0, 1, 6, 0, 4, 3, 5, 1, 2, 4, 0, 2, 1, 5, 3, 6, 1, 3, 2, 6, 0, 5, 4, 2, 4, 0, 3, 5, 1, 6, 6, 4, 5, 3, 1, 2, 0, 1, 4, 3, 5, 6, 0, 2, 6, 4, 5, 0, 1, 3, 2, 2, 1, 5, 4, 3, 6, 0, 2, 5, 6, 3, 0, 4, 1, 2, 0, 5, 4, 3, 6, 1, 3, 1, 4, 5, 6, 0, 2, 0, 3, 5, 1, 4, 6, 2, 1, 0, 3, 2, 6, 5, 4, 4, 0, 5, 6, 3, 1, 2, 2, 6, 3, 1, 0, 4, 5, 3, 4, 5, 1, 2, 0, 6, 3, 6, 4, 1, 0, 2, 5, 0, 6, 2, 1, 4, 3, 5, 1, 2, 5, 3, 6, 4, 0, 5, 0, 4, 1, 3, 2, 6, 1, 2, 6, 0, 5, 3, 4, 3, 4, 6, 1, 0, 2, 5, 0, 4, 6, 3, 2, 1, 5, 4, 2, 0, 5, 6, 1, 3, 1, 0, 5, 3, 4, 2, 6, 6, 2, 4, 3, 5, 0, 1, 2, 3, 4, 0, 6, 1, 5, 4, 1, 6, 3, 5, 2, 0, 4, 1, 3, 2, 5, 0, 6, 4, 5, 2, 1, 6, 3, 0, 5, 1, 3, 4, 6, 2, 0, 6, 1, 3, 0, 5, 2, 4, 2, 4, 3, 5, 1, 0, 6, 5, 2, 4, 1, 3, 6, 0, 0, 1, 4, 5, 2, 6, 3, 6, 0, 5, 3, 2, 4, 1, 1, 0, 6, 4, 2, 3, 5, 6, 1, 2, 3, 5, 0, 4, 5, 6, 4, 1, 0, 3, 2, 6, 3, 2, 1, 5, 0, 4, 6, 1, 0, 4, 2, 3, 5, 0, 3, 2, 1, 4, 5, 6, 5, 2, 3, 4, 0, 6, 1, 5, 0, 1, 4, 3, 2, 6, 3, 6, 2, 1, 0, 5, 4, 6, 3, 4, 5, 1, 2, 0, 4, 3, 6, 0, 5, 1, 2, 4, 2, 6, 5, 3, 0, 1, 5, 1, 0, 4, 3, 2, 6, 0, 2, 1, 3, 4, 6, 5, 4, 2, 3, 1, 5, 0, 6, 3, 5, 4, 6, 0, 2, 1, 6, 5, 3, 0, 1, 4, 2, 2, 0, 5, 6, 4, 1, 3, 0, 5, 2, 4, 3, 6, 1, 1, 3, 5, 2, 6, 0, 4, 1, 6, 4, 0, 3, 2, 5, 3, 6, 1, 0, 5, 4, 2, 5, 1, 4, 0, 6, 2, 3, 3, 0, 4, 1, 6, 2, 5, 1, 6, 5, 2, 0, 4, 3, 4, 0, 3, 5, 2, 6, 1, 4, 5, 0, 6, 2, 1, 3, 2, 5, 0, 1, 3, 4, 6, 5, 3, 0, 1, 6, 2, 4, 1, 6, 5, 3, 0, 4, 2, 1, 2, 0, 4, 6, 5, 3, 1, 2, 6, 5, 0, 4, 3, 3, 0, 1, 6, 5, 2, 4, 0, 6, 2, 4, 3, 1, 5, 2, 5, 6, 0, 3, 4, 1, 6, 4, 3, 1, 0, 2, 5, 2, 3, 4, 1, 0, 5, 6, 4, 1, 5, 6, 3, 0, 2, 0, 4, 6, 3, 1, 5, 2, 3, 4, 0, 6, 5, 2, 1, 0, 4, 3, 1, 5, 6, 2, 5, 1, 0, 4, 6, 3, 2, 6, 3, 0, 4, 2, 5, 1, 1, 4, 6, 2, 3, 0, 5, 3, 2, 0, 6, 4, 1, 5, 6, 3, 5, 2, 0, 4, 1, 5, 6, 1, 0, 3, 2, 4, 6, 1, 2, 5, 3, 0, 4, 1, 2, 4, 3, 5, 6, 0, 0, 2, 3, 1, 6, 5, 4, 6, 2, 0, 3, 5, 4, 1, 2, 3, 1, 0, 5, 4, 6, 5, 2, 4, 6, 1, 3, 0, 1, 0, 2, 5, 3, 4, 6, 1, 0, 3, 5, 2, 4, 6, 5, 4, 3, 6, 1, 0, 2, 1, 3, 5, 6, 0, 4, 2, 3, 0, 6, 5, 2, 4, 1, 0, 3, 1, 6, 5, 4, 2, 2, 5, 4, 6, 0, 1, 3, 6, 1, 5, 2, 3, 4, 0, 5, 1, 4, 6, 3, 0, 2, 6, 3, 5, 2, 1, 4, 0, 2, 1, 5, 6, 0, 3, 4, 2, 4, 1, 5, 0, 3, 6, 5, 6, 0, 3, 2, 4, 1, 4, 3, 1, 2, 5, 6, 0, 5, 1, 0, 6, 4, 2, 3, 4, 6, 5, 0, 2, 1, 3, 5, 6, 2, 0, 3, 4, 1, 5, 0, 4, 3, 6, 2, 1, 1, 5, 3, 0, 2, 4, 6, 3, 2, 1, 4, 0, 5, 6, 0, 1, 2, 3, 5, 6, 4, 2, 6, 0, 1, 3, 5, 4, 6, 5, 2, 3, 0, 4, 1, 4, 3, 0, 2, 1, 6, 5, 3, 6, 5, 4, 0, 2, 1, 5, 0, 1, 4, 6, 2, 3, 5, 2, 3, 4, 6, 0, 1, 0, 2, 6, 1, 5, 3, 4, 6, 3, 2, 5, 1, 4, 0, 4, 3, 2, 5, 1, 0, 6, 3, 5, 4, 1, 6, 0, 2, 3, 6, 1, 5, 2, 4, 0, 4, 3, 2, 6, 1, 5, 0, 1, 3, 6, 2, 5, 4, 0, 4, 3, 1, 6, 0, 5, 2, 3, 6, 2, 0, 1, 4, 5, 0, 1, 6, 5, 2, 4, 3, 6, 5, 0, 4, 2, 3, 1, 6, 0, 3, 5, 2, 4, 1, 5, 4, 6, 3, 0, 2, 1, 6, 3, 2, 0, 5, 4, 1, 3, 5, 4, 2, 1, 6, 0, 3, 1, 0, 5, 6, 2, 4, 0, 1, 3, 5, 6, 4, 2, 5, 4, 1, 2, 3, 6, 0, 6, 2, 4, 5, 3, 0, 1, 3, 0, 5, 2, 6, 4, 1, 1, 6, 0, 2, 3, 4, 5, 1, 2, 3, 0, 5, 4, 6, 2, 5, 1, 3, 6, 4, 0, 1, 3, 4, 0, 2, 6, 5, 4, 5, 3, 6, 2, 1, 0, 5, 6, 0, 3, 1, 2, 4, 6, 5, 2, 0, 3, 1, 4, 1, 4, 3, 6, 0, 5, 2, 6, 3, 5, 4, 2, 0, 1, 3, 6, 1, 4, 5, 2, 0, 4, 3, 2, 5, 1, 6, 0, 6, 3, 0, 5, 4, 2, 1, 5, 1, 0, 2, 3, 6, 4, 5, 6, 0, 1, 2, 4, 3, 5, 1, 2, 0, 3, 6, 4, 5, 6, 3, 4, 1, 0, 2, 4, 5, 1, 0, 3, 6, 2, 2, 4, 6, 3, 5, 0, 1, 2, 4, 1, 5, 0, 6, 3, 2, 0, 4, 1, 3, 5, 6, 2, 4, 5, 6, 0, 1, 3, 6, 1, 4, 5, 2, 0, 3, 6, 3, 5, 0, 4, 1, 2, 1, 2, 0, 5, 4, 3, 6, 0, 3, 1, 6, 4, 5, 2, 1, 3, 5, 2, 4, 0, 6, 2, 0, 3, 1, 5, 4, 6, 3, 5, 0, 2, 6, 4, 1, 3, 6, 1, 0, 2, 4, 5, 0, 4, 5, 6, 2, 3, 1, 3, 6, 5, 1, 2, 0, 4, 1, 5, 3, 2, 6, 4, 0, 6, 1, 3, 2, 5, 0, 4, 4, 1, 6, 0, 5, 2, 3, 1, 6, 0, 3, 4, 5, 2, 4, 6, 3, 2, 0, 5, 1, 5, 3, 2, 0, 1, 4, 6, 1, 0, 5, 2, 3, 4, 6, 0, 4, 5, 6, 2, 1, 3, 3, 0, 5, 1, 4, 6, 2, 3, 0, 1, 6, 2, 4, 5, 5, 1, 4, 0, 2, 6, 3, 5, 2, 1, 3, 4, 0, 6, 4, 0, 3, 1, 6, 2, 5, 6, 4, 2, 5, 3, 0, 1, 0, 6, 3, 5, 1, 2, 4, 6, 4, 2, 1, 3, 5, 0, 1, 3, 0, 5, 2, 6, 4, 1, 2, 3, 0, 4, 5, 6, 5, 1, 3, 0, 6, 4, 2, 6, 3, 2, 1, 5, 0, 4, 6, 3, 0, 2, 5, 1, 4, 6, 1, 3, 4, 5, 2, 0, 2, 1, 5, 4, 3, 6, 0, 4, 3, 2, 5, 6, 1, 0, 3, 1, 2, 5, 4, 0, 6, 3, 1, 4, 0, 2, 6, 5, 1, 4, 0, 2, 6, 5, 3, 0, 4, 5, 1, 2, 6, 3, 5, 0, 4, 1, 3, 6, 2, 1, 6, 3, 0, 2, 4, 5, 2, 3, 1, 4, 0, 6, 5, 3, 2, 1, 5, 0, 6, 4, 3, 2, 1, 5, 6, 4, 0, 3, 0, 6, 1, 5, 2, 4, 6, 2, 0, 5, 3, 4, 1, 5, 4, 1, 3, 6, 0, 2, 0, 6, 1, 3, 2, 5, 4, 0, 3, 1, 2, 4, 5, 6, 3, 6, 5, 4, 0, 1, 2, 1, 5, 3, 4, 2, 0, 6, 4, 0, 1, 5, 3, 6, 2, 4, 3, 0, 5, 2, 6, 1, 3, 2, 6, 5, 1, 4, 0, 0, 6, 5, 1, 4, 3, 2, 4, 1, 6, 2, 0, 3, 5, 6, 3, 4, 0, 5, 1, 2, 5, 4, 0, 3, 1, 2, 6, 3, 6, 5, 2, 0, 1, 4, 5, 6, 3, 0, 4, 1, 2, 6, 2, 4, 5, 3, 0, 1, 1, 3, 6, 2, 5, 4, 0, 6, 1, 0, 2, 5, 4, 3, 5, 4, 1, 6, 2, 0, 3, 2, 0, 1, 5, 4, 3, 6, 6, 1, 0, 3, 5, 2, 4, 5, 0, 3, 2, 4, 6, 1, 2, 5, 4, 1, 3, 6, 0, 1, 3, 0, 2, 6, 4, 5, 0, 5, 2, 3, 6, 4, 1, 2, 0, 4, 1, 3, 5, 6, 2, 0, 1, 6, 5, 4, 3, 2, 0, 1, 4, 6, 5, 3, 0, 4, 2, 6, 1, 3, 5, 0, 4, 6, 5, 3, 2, 1, 6, 0, 3, 4, 5, 1, 2, 6, 2, 4, 3, 1, 5, 0, 5, 3, 1, 2, 0, 6, 4, 0, 6, 3, 1, 4, 2, 5, 5, 6, 4, 3, 2, 0, 1, 2, 6, 4, 3, 1, 0, 5, 6, 5, 3, 4, 0, 2, 1, 6, 4, 1, 5, 2, 0, 3, 3, 2, 0, 4, 1, 5, 6, 5, 2, 3, 6, 1, 4, 0, 4, 5, 0, 3, 6, 2, 1, 3, 4, 0, 6, 2, 5, 1, 6, 0, 4, 1, 3, 5, 2, 2, 5, 1, 0, 4, 6, 3, 1, 2, 6, 4, 0, 5, 3, 2, 4, 6, 3, 1, 0, 5, 4, 5, 2, 6, 1, 3, 0, 3, 5, 0, 2, 6, 4, 1, 1, 6, 3, 2, 4, 5, 0, 4, 1, 6, 5, 0, 3, 2, 2, 4, 5, 3, 1, 6, 0, 6, 0, 1, 4, 3, 5, 2, 6, 2, 5, 4, 1, 3, 0, 1, 4, 0, 5, 2, 6, 3, 1, 3, 5, 4, 6, 0, 2, 2, 5, 4, 1, 0, 6, 3, 5, 3, 1, 6, 2, 0, 4, 2, 4, 5, 0, 3, 6, 1, 1, 2, 0, 3, 4, 6, 5, 5, 1, 0, 6, 4, 3, 2, 3, 2, 1, 5, 6, 4, 0, 3, 5, 6, 2, 1, 0, 4, 5, 2, 1, 3, 4, 6, 0, 4, 1, 5, 3, 2, 0, 6, 4, 0, 3, 1, 6, 5, 2, 6, 2, 0, 4, 3, 5, 1, 5, 0, 3, 2, 1, 4, 6, 0, 1, 5, 3, 4, 6, 2, 4, 5, 6, 0, 2, 3, 1, 4, 6, 0, 3, 2, 5, 1, 0, 6, 1, 2, 5, 4, 3, 4, 2, 0, 1, 5, 3, 6, 3, 2, 6, 0, 5, 4, 1, 3, 4, 2, 0, 5, 6, 1, 2, 3, 5, 6, 0, 4, 1, 6, 1, 3, 4, 5, 2, 0, 4, 2, 6, 3, 0, 5, 1, 6, 5, 1, 4, 2, 3, 0, 4, 6, 3, 1, 5, 0, 2, 5, 4, 3, 1, 2, 6, 0, 0, 3, 4, 2, 5, 1, 6, 4, 3, 0, 6, 2, 1, 5, 1, 0, 3, 6, 2, 5, 4, 2, 3, 5, 0, 6, 4, 1, 2, 4, 1, 6, 3, 0, 5, 0, 5, 4, 2, 6, 1, 3, 2, 1, 0, 4, 3, 5, 6, 0, 1, 5, 6, 2, 3, 4, 0, 5, 6, 4, 1, 3, 2, 1, 4, 5, 6, 3, 0, 2, 3, 5, 2, 0, 4, 6, 1, 6, 5, 3, 4, 0, 1, 2, 2, 1, 6, 3, 0, 4, 5, 6, 0, 4, 3, 5, 2, 1, 5, 0, 2, 3, 4, 1, 6, 5, 4, 0, 1, 2, 6, 3, 3, 0, 2, 6, 4, 5, 1, 6, 3, 1, 0, 2, 4, 5, 4, 1, 0, 2, 6, 3, 5, 0, 3, 5, 1, 6, 4, 2, 6, 4, 0, 1, 5, 3, 2, 2, 6, 4, 1, 0, 3, 5, 4, 2, 6, 5, 3, 0, 1, 0, 6, 1, 4, 3, 5, 2, 5, 1, 6, 3, 2, 0, 4, 2, 4, 5, 0, 1, 6, 3, 4, 3, 2, 5, 6, 0, 1, 0, 3, 2, 5, 6, 4, 1, 1, 5, 2, 3, 6, 4, 0, 2, 6, 5, 1, 0, 4, 3, 2, 5, 4, 6, 1, 3, 0, 3, 5, 2, 0, 1, 4, 6, 3, 6, 5, 2, 0, 1, 4, 2, 5, 6, 3, 0, 1, 4, 3, 5, 1, 6, 2, 4, 0, 4, 0, 2, 1, 3, 5, 6, 2, 4, 0, 5, 6, 1, 3, 1, 2, 3, 6, 0, 5, 4, 6, 3, 2, 5, 0, 1, 4, 6, 1, 4, 2, 0, 5, 3, 3, 5, 4, 1, 2, 6, 0, 2, 5, 0, 4, 6, 1, 3, 5, 2, 1, 3, 0, 6, 4, 1, 6, 3, 5, 2, 4, 0, 1, 5, 0, 6, 3, 4, 2, 3, 1, 2, 4, 0, 5, 6, 6, 5, 1, 4, 0, 3, 2, 6, 3, 1, 2, 5, 0, 4, 6, 1, 2, 5, 4, 3, 0, 6, 3, 1, 0, 5, 4, 2, 2, 4, 0, 3, 1, 5, 6, 5, 3, 2, 1, 6, 4, 0, 6, 0, 4, 1, 2, 3, 5, 1, 4, 0, 5, 3, 6, 2, 1, 6, 4, 2, 3, 0, 5, 6, 2, 1, 0, 5, 4, 3, 1, 2, 4, 6, 0, 3, 5, 6, 5, 1, 0, 4, 3, 2, 4, 6, 0, 2, 1, 5, 3, 5, 1, 0, 4, 2, 6, 3, 0, 4, 6, 5, 1, 3, 2, 3, 1, 2, 4, 5, 0, 6, 6, 3, 2, 5, 1, 4, 0, 2, 3, 5, 0, 4, 6, 1, 5, 3, 0, 4, 2, 6, 1, 2, 3, 4, 5, 0, 6, 1, 4, 2, 5, 1, 0, 6, 3, 3, 1, 6, 4, 5, 2, 0, 0, 6, 1, 2, 5, 3, 4, 4, 0, 3, 6, 1, 2, 5, 5, 6, 1, 0, 3, 2, 4, 0, 5, 2, 6, 3, 4, 1, 0, 5, 4, 2, 1, 6, 3, 6, 3, 2, 1, 0, 4, 5, 3, 6, 5, 1, 0, 2, 4, 3, 6, 1, 0, 2, 4, 5, 1, 6, 0, 4, 2, 3, 5, 2, 5, 6, 1, 4, 3, 0, 4, 6, 3, 1, 2, 5, 0, 6, 5, 0, 3, 2, 4, 1, 6, 5, 4, 3, 2, 0, 1, 5, 3, 6, 2, 0, 1, 4, 4, 6, 5, 3, 2, 1, 0, 5, 2, 0, 6, 1, 3, 4, 3, 1, 0, 2, 5, 6, 4, 3, 0, 2, 6, 4, 1, 5, 0, 3, 1, 4, 6, 2, 5, 3, 0, 5, 1, 2, 6, 4, 1, 4, 5, 3, 0, 6, 2, 5, 2, 0, 4, 1, 3, 6, 2, 1, 5, 6, 0, 4, 3, 2, 0, 1, 3, 6, 5, 4, 0, 4, 3, 2, 5, 1, 6, 6, 1, 0, 4, 3, 2, 5, 1, 0, 2, 3, 6, 4, 5, 5, 3, 2, 0, 1, 6, 4, 3, 5, 4, 6, 2, 1, 0, 1, 6, 0, 2, 3, 5, 4, 6, 3, 1, 5, 4, 0, 2, 6, 5, 4, 3, 1, 2, 0, 6, 4, 3, 1, 0, 2, 5, 3, 0, 4, 1, 6, 2, 5, 6, 1, 3, 2, 5, 4, 0, 0, 3, 1, 4, 6, 5, 2, 5, 0, 2, 4, 1, 6, 3, 2, 0, 4, 5, 3, 1, 6, 1, 5, 6, 4, 0, 3, 2, 4, 5, 0, 1, 3, 6, 2, 0, 5, 4, 2, 1, 3, 6, 3, 2, 0, 5, 6, 4, 1, 1, 0, 5, 2, 4, 3, 6, 2, 6, 1, 3, 0, 4, 5, 3, 0, 1, 4, 5, 2, 6, 2, 4, 1, 0, 6, 5, 3, 0, 2, 6, 5, 1, 3, 4, 3, 0, 4, 2, 1, 5, 6, 0, 3, 6, 2, 5, 1, 4, 1, 2, 3, 4, 6, 0, 5, 4, 0, 6, 1, 2, 5, 3, 1, 2, 3, 5, 0, 4, 6, 1, 5, 4, 2, 3, 6, 0, 2, 5, 3, 1, 6, 0, 4, 4, 2, 0, 5, 3, 6, 1, 5, 0, 6, 1, 3, 2, 4, 4, 6, 0, 2, 3, 5, 1, 2, 3, 5, 4, 0, 6, 1, 1, 6, 0, 2, 4, 5, 3, 1, 3, 4, 0, 2, 5, 6, 2, 5, 1, 4, 0, 6, 3, 5, 4, 2, 6, 3, 1, 0, 6, 4, 0, 1, 5, 3, 2, 6, 2, 1, 3, 0, 5, 4, 5, 4, 6, 1, 0, 2, 3, 6, 1, 5, 0, 3, 4, 2, 6, 4, 1, 2, 5, 0, 3, 2, 3, 4, 5, 6, 1, 0, 6, 4, 5, 2, 1, 3, 0, 0, 1, 4, 3, 5, 2, 6, 1, 2, 0, 4, 5, 6, 3, 3, 2, 5, 6, 0, 1, 4, 3, 5, 2, 0, 1, 6, 4, 2, 3, 5, 6, 1, 0, 4, 3, 5, 1, 2, 0, 4, 6, 4, 6, 0, 5, 3, 2, 1, 3, 2, 5, 4, 0, 1, 6, 0, 5, 6, 4, 2, 1, 3, 3, 5, 4, 1, 6, 2, 0, 2, 6, 4, 0, 1, 3, 5, 0, 6, 2, 4, 5, 3, 1, 6, 5, 0, 1, 2, 3, 4, 1, 4, 6, 3, 5, 2, 0, 5, 4, 0, 6, 2, 1, 3, 6, 2, 4, 5, 1, 3, 0, 6, 5, 0, 1, 4, 2, 3, 4, 2, 6, 0, 5, 3, 1, 5, 4, 3, 2, 6, 1, 0, 2, 5, 1, 6, 3, 4, 0, 0, 3, 1, 5, 6, 2, 4, 6, 5, 2, 4, 1, 0, 3, 3, 1, 4, 6, 2, 5, 0, 0, 4, 6, 1, 3, 2, 5, 6, 3, 4, 5, 0, 1, 2, 3, 4, 2, 0, 1, 6, 5, 1, 6, 4, 2, 5, 3, 0, 6, 3, 1, 0, 4, 2, 5, 6, 5, 0, 3, 2, 4, 1, 5, 1, 6, 4, 3, 0, 2, 6, 1, 3, 4, 2, 5, 0, 5, 4, 6, 2, 3, 0, 1, 2, 4, 0, 1, 6, 3, 5, 4, 6, 3, 0, 2, 5, 1, 5, 4, 0, 3, 1, 6, 2, 2, 1, 4, 0, 5, 3, 6, 6, 0, 3, 4, 2, 5, 1, 6, 2, 3, 4, 5, 0, 1, 5, 6, 0, 1, 2, 4, 3, 4, 6, 5, 3, 2, 1, 0, 2, 4, 3, 1, 5, 6, 0, 6, 0, 4, 3, 1, 5, 2, 4, 2, 5, 0, 6, 3, 1, 1, 3, 2, 5, 0, 4, 6, 1, 4, 6, 2, 0, 3, 5, 5, 6, 2, 0, 4, 1, 3, 3, 6, 1, 5, 0, 4, 2, 0, 5, 2, 1, 4, 6, 3, 6, 4, 5, 3, 0, 2, 1, 2, 3, 6, 1, 4, 0, 5, 2, 4, 6, 1, 5, 3, 0, 2, 1, 3, 6, 5, 4, 0, 2, 5, 4, 6, 1, 0, 3, 1, 0, 2, 6, 3, 4, 5, 0, 5, 3, 2, 1, 4, 6, 0, 4, 2, 3, 6, 5, 1, 3, 2, 5, 6, 4, 1, 0, 4, 0, 5, 2, 3, 1, 6, 5, 2, 6, 0, 1, 3, 4, 1, 0, 6, 4, 2, 5, 3, 6, 5, 3, 4, 1, 2, 0, 5, 3, 4, 2, 1, 6, 0, 5, 2, 0, 1, 3, 6, 4, 6, 2, 5, 3, 4, 1, 0, 5, 2, 4, 0, 6, 1, 3, 5, 4, 2, 6, 1, 3, 0, 4, 1, 2, 6, 0, 3, 5, 4, 3, 0, 1, 5, 6, 2, 3, 6, 1, 0, 2, 4, 5, 5, 6, 4, 0, 2, 1, 3, 5, 0, 6, 3, 1, 4, 2, 4, 0, 5, 3, 2, 6, 1, 5, 6, 4, 3, 0, 2, 1, 5, 3, 0, 1, 6, 2, 4, 2, 0, 6, 1, 4, 3, 5, 3, 0, 6, 4, 2, 5, 1, 2, 0, 3, 4, 1, 5, 6, 3, 4, 1, 5, 6, 0, 2, 6, 5, 3, 4, 1, 0, 2, 1, 0, 5, 6, 2, 3, 4, 4, 5, 3, 0, 6, 1, 2, 6, 0, 5, 1, 4, 2, 3, 3, 6, 5, 4, 2, 0, 1, 1, 6, 4, 2, 0, 3, 5, 6, 3, 0, 1, 5, 4, 2, 0, 5, 6, 4, 3, 2, 1, 2, 1, 4, 0, 5, 3, 6, 1, 3, 5, 4, 6, 2, 0, 5, 0, 1, 2, 3, 6, 4, 0, 6, 3, 1, 5, 2, 4, 3, 4, 2, 5, 6, 1, 0, 5, 2, 3, 1, 6, 4, 0, 5, 3, 6, 1, 0, 4, 2, 0, 5, 2, 6, 4, 1, 3, 1, 0, 2, 3, 5, 4, 6, 4, 5, 6, 3, 1, 0, 2, 1, 4, 0, 5, 2, 3, 6, 1, 4, 2, 3, 0, 6, 5, 4, 3, 2, 6, 5, 0, 1, 1, 4, 2, 0, 5, 6, 3, 2, 0, 6, 4, 5, 1, 3, 6, 0, 2, 3, 1, 4, 5, 2, 0, 4, 5, 3, 6, 1, 1, 0, 4, 5, 2, 3, 6, 5, 1, 4, 2, 6, 3, 0, 0, 1, 4, 3, 6, 2, 5, 3, 2, 4, 1, 6, 0, 5, 2, 4, 5, 6, 3, 1, 0, 4, 2, 3, 1, 0, 6, 5, 1, 5, 6, 0, 4, 3, 2, 0, 3, 1, 6, 5, 2, 4, 6, 2, 3, 5, 1, 4, 0, 2, 3, 6, 5, 0, 1, 4, 4, 6, 5, 0, 2, 1, 3, 2, 3, 5, 1, 0, 4, 6, 0, 4, 5, 2, 1, 3, 6, 5, 3, 6, 0, 1, 4, 2, 5, 3, 2, 6, 1, 0, 4, 3, 5, 4, 0, 2, 6, 1, 4, 0, 6, 2, 5, 1, 3, 3, 6, 1, 5, 4, 2, 0, 5, 6, 2, 1, 4, 0, 3, 6, 0, 1, 2, 5, 4, 3, 6, 2, 3, 1, 5, 4, 0, 5, 1, 2, 3, 6, 4, 0, 0, 3, 1, 6, 4, 5, 2, 4, 1, 0, 5, 2, 6, 3, 4, 2, 5, 0, 3, 1, 6, 3, 6, 5, 4, 0, 2, 1, 5, 3, 0, 6, 1, 4, 2, 3, 2, 6, 1, 0, 5, 4, 5, 3, 0, 4, 1, 2, 6, 1, 3, 2, 0, 4, 5, 6, 1, 2, 6, 4, 5, 0, 3, 0, 3, 4, 1, 2, 6, 5, 5, 3, 4, 1, 2, 0, 6, 4, 6, 1, 5, 3, 0, 2, 5, 0, 1, 2, 3, 4, 6, 6, 3, 0, 4, 5, 1, 2, 6, 0, 1, 2, 4, 3, 5, 1, 0, 6, 4, 3, 5, 2, 0, 5, 3, 2, 1, 6, 4, 3, 4, 1, 0, 5, 6, 2, 2, 6, 4, 1, 5, 3, 0, 5, 1, 0, 3, 4, 6, 2, 1, 4, 2, 5, 3, 0, 6, 2, 6, 0, 3, 4, 5, 1, 0, 3, 2, 4, 5, 1, 6, 6, 3, 1, 5, 4, 0, 2, 0, 4, 2, 6, 1, 5, 3, 5, 6, 0, 3, 2, 1, 4, 5, 0, 6, 1, 3, 2, 4, 2, 3, 0, 5, 1, 6, 4, 0, 5, 6, 4, 2, 1, 3, 3, 2, 1, 6, 5, 0, 4, 3, 2, 6, 1, 5, 4, 0, 2, 1, 3, 6, 5, 0, 4, 6, 5, 4, 2, 0, 3, 1, 0, 4, 5, 2, 6, 3, 1, 1, 2, 3, 4, 6, 0, 5, 1, 3, 2, 6, 4, 5, 0, 4, 3, 2, 0, 6, 5, 1, 4, 3, 0, 2, 5, 6, 1, 3, 1, 6, 0, 2, 4, 5, 0, 6, 5, 4, 3, 2, 1, 1, 4, 6, 3, 0, 5, 2, 5, 3, 4, 6, 1, 0, 2, 4, 1, 6, 3, 5, 0, 2, 3, 0, 1, 5, 6, 2, 4, 2, 6, 3, 5, 1, 4, 0, 1, 6, 0, 4, 5, 2, 3, 3, 6, 2, 0, 4, 5, 1, 5, 0, 6, 4, 3, 1, 2, 1, 4, 5, 3, 0, 6, 2, 2, 0, 4, 5, 3, 1, 6, 4, 2, 6, 0, 3, 5, 1, 4, 1, 6, 3, 2, 5, 0, 4, 2, 0, 6, 3, 1, 5, 1, 3, 4, 6, 0, 5, 2, 5, 4, 2, 0, 1, 6, 3, 1, 4, 6, 3, 5, 0, 2, 3, 6, 2, 5, 0, 4, 1, 2, 4, 0, 6, 1, 3, 5, 6, 5, 3, 4, 0, 2, 1, 5, 3, 6, 2, 1, 4, 0, 3, 5, 2, 4, 6, 1, 0, 3, 2, 0, 6, 1, 5, 4, 6, 4, 0, 1, 3, 2, 5, 6, 0, 3, 4, 1, 2, 5, 6, 2, 5, 0, 3, 1, 4, 1, 4, 2, 0, 5, 6, 3, 2, 3, 0, 4, 1, 5, 6, 0, 2, 6, 4, 1, 3, 5, 6, 4, 0, 5, 2, 1, 3, 2, 5, 4, 1, 0, 3, 6, 0, 1, 3, 4, 2, 5, 6, 6, 4, 2, 1, 0, 5, 3, 5, 3, 0, 1, 4, 6, 2, 0, 3, 4, 5, 6, 1, 2, 1, 6, 3, 2, 0, 4, 5, 0, 4, 5, 6, 3, 2, 1, 6, 1, 2, 3, 0, 5, 4, 0, 5, 1, 3, 2, 4, 6, 6, 1, 4, 3, 0, 5, 2, 2, 6, 3, 1, 0, 4, 5, 4, 6, 1, 5, 2, 3, 0, 1, 4, 3, 6, 5, 0, 2, 2, 1, 5, 4, 3, 0, 6, 1, 3, 2, 4, 5, 0, 6, 1, 4, 5, 3, 6, 2, 0, 0, 6, 2, 3, 1, 5, 4, 3, 1, 5, 6, 2, 4, 0, 6, 3, 5, 0, 1, 4, 2, 5, 2, 4, 6, 0, 3, 1, 0, 4, 6, 3, 2, 5, 1, 4, 2, 6, 1, 3, 5, 0, 4, 2, 3, 5, 1, 6, 0, 4, 2, 1, 5, 3, 6, 0, 2, 0, 3, 6, 1, 4, 5, 5, 0, 4, 6, 2, 3, 1, 0, 1, 3, 4, 2, 6, 5, 5, 1, 0, 4, 3, 6, 2, 2, 6, 3, 5, 1, 0, 4, 3, 0, 4, 1, 2, 5, 6, 2, 1, 4, 5, 6, 0, 3, 3, 0, 5, 1, 2, 4, 6, 5, 6, 0, 2, 4, 3, 1, 6, 3, 2, 1, 5, 4, 0, 5, 4, 0, 3, 1, 2, 6, 3, 6, 4, 0, 2, 1, 5, 2, 3, 0, 1, 5, 6, 4, 4, 3, 6, 0, 5, 1, 2, 6, 1, 0, 3, 4, 5, 2, 5, 3, 6, 1, 4, 0, 2, 3, 4, 1, 0, 2, 5, 6, 1, 5, 4, 2, 6, 3, 0, 5, 6, 2, 0, 3, 4, 1, 2, 3, 0, 4, 1, 5, 6, 1, 2, 3, 4, 6, 0, 5, 1, 5, 4, 0, 2, 3, 6, 5, 4, 0, 3, 2, 1, 6, 5, 4, 0, 2, 1, 6, 3, 4, 1, 3, 5, 0, 6, 2, 5, 3, 0, 1, 6, 2, 4, 1, 5, 3, 4, 0, 2, 6, 2, 1, 0, 6, 5, 3, 4, 2, 6, 4, 0, 3, 1, 5, 4, 5, 2, 0, 6, 1, 3, 5, 0, 4, 3, 2, 1, 6, 6, 1, 3, 2, 0, 5, 4, 4, 1, 6, 5, 0, 3, 2, 2, 1, 0, 5, 6, 3, 4, 2, 3, 4, 5, 1, 6, 0, 1, 0, 2, 4, 3, 6, 5, 3, 5, 2, 1, 6, 4, 0, 2, 0, 3, 1, 6, 4, 5, 4, 6, 1, 2, 0, 3, 5, 3, 4, 0, 1, 6, 5, 2, 0, 3, 6, 5, 1, 4, 2, 6, 1, 2, 3, 0, 5, 4, 5, 2, 6, 4, 1, 0, 3, 4, 5, 1, 6, 2, 0, 3, 1, 0, 2, 6, 5, 3, 4, 3, 6, 4, 2, 0, 5, 1, 1, 5, 3, 6, 0, 2, 4, 6, 5, 0, 2, 3, 4, 1, 2, 1, 6, 5, 3, 0, 4, 3, 6, 0, 2, 5, 1, 4, 6, 4, 3, 5, 1, 0, 2, 4, 2, 0, 5, 6, 3, 1, 0, 5, 3, 4, 1, 2, 6, 5, 3, 2, 4, 0, 6, 1, 3, 5, 0, 6, 1, 2, 4, 4, 1, 2, 5, 0, 6, 3, 1, 3, 4, 2, 0, 6, 5, 6, 1, 3, 5, 2, 4, 0, 4, 6, 2, 1, 0, 3, 5, 1, 5, 3, 2, 0, 6, 4, 1, 2, 5, 4, 3, 6, 0, 6, 2, 1, 0, 3, 5, 4, 4, 1, 5, 0, 2, 3, 6, 4, 5, 0, 3, 6, 2, 1, 2, 3, 0, 4, 5, 1, 6, 4, 3, 1, 2, 5, 0, 6, 1, 5, 3, 0, 4, 6, 2, 4, 2, 1, 3, 5, 0, 6, 3, 1, 5, 6, 4, 2, 0, 3, 6, 2, 4, 5, 1, 0, 6, 5, 3, 1, 0, 4, 2, 2, 5, 0, 6, 4, 3, 1, 3, 2, 1, 4, 0, 6, 5, 3, 2, 0, 5, 4, 6, 1, 1, 3, 2, 5, 0, 4, 6, 5, 3, 0, 1, 4, 6, 2, 6, 1, 4, 5, 0, 2, 3, 3, 0, 2, 6, 5, 1, 4, 3, 2, 1, 6, 5, 4, 0, 1, 3, 4, 0, 2, 5, 6, 3, 4, 2, 1, 0, 6, 5, 2, 5, 4, 3, 0, 6, 1, 0, 4, 3, 5, 6, 1, 2, 2, 4, 6, 5, 1, 0, 3, 1, 5, 6, 4, 0, 2, 3, 2, 5, 6, 4, 3, 1, 0, 3, 6, 0, 4, 2, 1, 5, 3, 5, 2, 4, 1, 6, 0, 0, 6, 1, 5, 4, 3, 2, 2, 0, 4, 3, 1, 6, 5, 0, 4, 5, 3, 2, 1, 6, 0, 2, 4, 5, 3, 6, 1, 6, 3, 5, 0, 1, 4, 2, 1, 3, 5, 4, 0, 6, 2, 0, 5, 3, 4, 6, 2, 1, 6, 3, 1, 0, 4, 2, 5, 1, 4, 2, 0, 3, 5, 6, 5, 1, 0, 6, 2, 3, 4, 5, 1, 4, 6, 3, 0, 2, 2, 3, 6, 1, 4, 0, 5, 0, 3, 4, 2, 6, 5, 1, 5, 1, 3, 2, 6, 0, 4, 5, 3, 2, 0, 4, 6, 1, 6, 0, 1, 3, 5, 2, 4, 0, 5, 1, 6, 2, 3, 4, 5, 3, 2, 1, 0, 6, 4, 6, 3, 2, 5, 4, 0, 1, 0, 2, 1, 3, 6, 5, 4, 0, 6, 5, 4, 1, 2, 3, 0, 5, 6, 1, 2, 3, 4, 4, 6, 3, 1, 0, 2, 5, 0, 4, 3, 2, 6, 5, 1, 1, 6, 2, 0, 3, 5, 4, 1, 0, 3, 6, 4, 5, 2, 3, 2, 6, 0, 5, 4, 1, 5, 2, 3, 6, 0, 1, 4, 2, 6, 5, 0, 1, 4, 3, 4, 0, 3, 5, 1, 6, 2, 1, 3, 4, 5, 6, 0, 2, 1, 3, 4, 0, 5, 2, 6, 6, 5, 3, 1, 2, 4, 0, 4, 1, 5, 2, 6, 0, 3, 1, 6, 0, 2, 5, 4, 3, 0, 4, 5, 6, 3, 2, 1, 5, 2, 1, 0, 6, 4, 3, 0, 4, 6, 3, 2, 5, 1, 5, 3, 0, 4, 2, 6, 1, 1, 0, 5, 2, 6, 3, 4, 5, 2, 4, 1, 3, 0, 6, 1, 3, 0, 6, 4, 2, 5, 1, 0, 3, 6, 5, 2, 4, 0, 2, 5, 3, 6, 4, 1, 5, 6, 3, 4, 0, 2, 1, 4, 5, 1, 2, 3, 0, 6, 6, 0, 2, 1, 3, 5, 4, 6, 4, 1, 0, 5, 2, 3, 0, 3, 6, 4, 5, 1, 2, 2, 6, 5, 3, 0, 1, 4, 5, 4, 1, 3, 2, 0, 6, 5, 6, 3, 2, 4, 0, 1, 1, 2, 3, 0, 4, 6, 5, 2, 5, 6, 0, 3, 4, 1, 1, 5, 3, 6, 4, 0, 2, 1, 0, 2, 4, 3, 5, 6, 6, 0, 3, 4, 2, 1, 5, 1, 0, 2, 3, 5, 4, 6, 5, 1, 0, 6, 4, 2, 3, 5, 2, 1, 6, 3, 0, 4, 6, 1, 4, 5, 3, 2, 0, 3, 5, 0, 6, 2, 4, 1, 3, 2, 4, 0, 6, 5, 1, 3, 0, 2, 5, 4, 1, 6, 0, 4, 2, 5, 3, 6, 1, 1, 2, 0, 4, 6, 3, 5, 0, 5, 6, 3, 2, 1, 4, 4, 1, 3, 5, 2, 6, 0, 1, 3, 4, 2, 6, 0, 5, 4, 3, 6, 2, 0, 5, 1, 5, 1, 2, 6, 3, 4, 0, 5, 0, 2, 6, 1, 4, 3, 4, 6, 5, 1, 3, 0, 2, 4, 3, 5, 1, 6, 0, 2, 3, 0, 6, 2, 5, 4, 1, 2, 5, 0, 4, 6, 1, 3, 4, 0, 1, 5, 6, 3, 2, 4, 3, 0, 1, 2, 5, 6, 6, 5, 2, 0, 4, 3, 1, 1, 6, 0, 2, 4, 3, 5, 0, 5, 3, 4, 6, 2, 1, 0, 6, 5, 1, 4, 2, 3, 6, 2, 0, 3, 1, 5, 4, 6, 3, 4, 0, 5, 1, 2, 4, 1, 2, 6, 5, 3, 0, 4, 6, 1, 5, 3, 2, 0, 0, 2, 1, 5, 3, 6, 4, 2, 1, 5, 3, 6, 4, 0, 0, 5, 6, 1, 4, 3, 2, 5, 6, 2, 3, 0, 4, 1, 6, 0, 1, 2, 4, 5, 3, 0, 3, 1, 2, 5, 6, 4, 1, 6, 3, 0, 4, 2, 5, 2, 1, 0, 6, 4, 5, 3, 6, 3, 2, 4, 1, 5, 0, 6, 4, 1, 2, 5, 3, 0, 2, 4, 6, 3, 1, 0, 5, 3, 6, 4, 5, 0, 2, 1, 1, 0, 6, 5, 2, 3, 4, 6, 1, 0, 5, 3, 2, 4, 4, 3, 1, 2, 5, 0, 6, 4, 6, 2, 1, 5, 0, 3, 0, 5, 4, 1, 2, 3, 6, 3, 6, 5, 2, 1, 0, 4, 2, 1, 5, 4, 6, 0, 3, 0, 4, 5, 1, 2, 6, 3, 6, 0, 3, 4, 2, 1, 5, 5, 3, 1, 2, 6, 4, 0, 3, 5, 4, 0, 2, 1, 6, 1, 4, 5, 6, 0, 2, 3, 1, 2, 4, 5, 6, 0, 3, 2, 4, 0, 5, 6, 1, 3, 0, 6, 1, 5, 4, 3, 2, 1, 6, 5, 3, 0, 4, 2, 1, 3, 2, 0, 4, 6, 5, 4, 3, 2, 0, 6, 1, 5, 1, 5, 2, 3, 4, 6, 0, 0, 3, 5, 2, 6, 4, 1, 2, 3, 0, 4, 5, 1, 6, 5, 0, 3, 6, 1, 2, 4, 4, 1, 0, 3, 2, 6, 5, 2, 4, 1, 0, 6, 3, 5, 1, 2, 5, 6, 4, 0, 3, 3, 5, 2, 0, 4, 6, 1, 4, 3, 2, 1, 6, 0, 5, 6, 4, 0, 1, 2, 3, 5, 6, 1, 0, 3, 2, 4, 5, 3, 4, 2, 1, 5, 0, 6, 3, 4, 6, 2, 5, 1, 0, 2, 4, 0, 6, 3, 1, 5, 3, 4, 0, 2, 1, 6, 5, 0, 5, 4, 2, 3, 6, 1, 6, 2, 3, 0, 1, 4, 5, 0, 4, 2, 3, 5, 6, 1, 5, 1, 2, 4, 3, 0, 6, 5, 2, 0, 6, 1, 4, 3, 0, 1, 5, 2, 6, 4, 3, 5, 0, 3, 1, 4, 6, 2, 1, 6, 5, 4, 0, 2, 3, 2, 3, 5, 4, 0, 1, 6, 4, 0, 3, 6, 1, 5, 2, 1, 0, 4, 3, 5, 6, 2, 3, 0, 2, 6, 4, 5, 1, 3, 4, 0, 1, 5, 6, 2, 3, 6, 5, 1, 0, 4, 2, 6, 3, 4, 0, 2, 1, 5, 3, 0, 4, 5, 2, 6, 1, 4, 0, 1, 6, 2, 5, 3, 1, 0, 5, 3, 4, 6, 2, 3, 0, 6, 4, 1, 2, 5, 4, 5, 0, 6, 2, 3, 1, 3, 0, 2, 6, 5, 4, 1, 1, 4, 5, 3, 0, 6, 2, 6, 5, 0, 1, 2, 3, 4, 3, 2, 1, 0, 5, 6, 4, 4, 2, 1, 6, 0, 3, 5, 2, 0, 4, 6, 3, 5, 1, 1, 6, 3, 5, 4, 0, 2, 1, 4, 3, 2, 6, 0, 5, 1, 3, 0, 5, 4, 2, 6, 1, 4, 6, 0, 3, 5, 2, 2, 5, 4, 0, 3, 6, 1, 6, 0, 2, 5, 1, 4, 3, 3, 5, 0, 2, 6, 4, 1, 2, 5, 4, 3, 1, 0, 6, 3, 0, 4, 1, 5, 2, 6, 1, 3, 0, 4, 6, 5, 2, 4, 6, 3, 1, 0, 2, 5, 4, 5, 2, 1, 3, 0, 6, 6, 4, 2, 3, 0, 1, 5, 4, 6, 1, 5, 0, 2, 3, 5, 4, 2, 0, 6, 1, 3, 6, 4, 1, 0, 3, 5, 2, 4, 3, 5, 0, 1, 6, 2, 6, 3, 0, 5, 2, 1, 4, 4, 3, 6, 0, 2, 5, 1, 2, 0, 5, 1, 4, 3, 6, 4, 5, 0, 3, 6, 1, 2, 5, 1, 6, 3, 2, 4, 0, 6, 0, 2, 5, 4, 1, 3, 0, 3, 6, 5, 4, 2, 1, 0, 3, 6, 1, 2, 5, 4, 2, 3, 4, 1, 5, 0, 6, 0, 1, 6, 5, 2, 4, 3, 1, 6, 3, 2, 0, 4, 5, 2, 1, 3, 6, 5, 0, 4, 1, 0, 4, 2, 5, 6, 3, 4, 0, 5, 2, 1, 3, 6, 6, 0, 1, 3, 2, 5, 4, 5, 1, 4, 6, 2, 0, 3, 0, 1, 2, 3, 4, 5, 6, 6, 3, 4, 1, 5, 0, 2, 4, 0, 2, 5, 6, 3, 1, 0, 2, 1, 6, 3, 5, 4, 6, 0, 5, 3, 4, 2, 1, 6, 4, 2, 1, 0, 3, 5, 3, 0, 4, 1, 6, 2, 5, 6, 4, 2, 1, 3, 5, 0, 3, 0, 2, 6, 5, 4, 1, 0, 4, 1, 2, 3, 5, 6, 1, 4, 3, 0, 6, 2, 5, 0, 6, 1, 2, 3, 4, 5, 4, 1, 5, 6, 0, 2, 3, 6, 2, 5, 3, 1, 4, 0, 5, 1, 2, 4, 0, 3, 6, 1, 3, 6, 5, 2, 0, 4, 6, 0, 4, 2, 1, 3, 5, 0, 6, 2, 4, 5, 1, 3, 0, 5, 3, 4, 6, 2, 1, 2, 1, 3, 4, 0, 5, 6, 2, 4, 0, 1, 5, 3, 6, 1, 3, 0, 2, 6, 4, 5, 2, 5, 6, 0, 3, 1, 4, 6, 1, 5, 3, 4, 2, 0, 5, 0, 6, 4, 2, 1, 3, 3, 6, 5, 1, 0, 2, 4, 6, 2, 5, 1, 3, 4, 0, 1, 4, 0, 5, 6, 3, 2, 6, 0, 2, 4, 3, 1, 5, 6, 0, 1, 2, 3, 5, 4, 5, 0, 1, 2, 6, 4, 3, 0, 5, 2, 4, 3, 1, 6, 1, 2, 5, 0, 6, 4, 3, 2, 4, 1, 6, 0, 3, 5, 6, 3, 0, 2, 4, 1, 5, 6, 4, 5, 2, 0, 1, 3, 2, 0, 6, 4, 5, 1, 3, 5, 6, 1, 4, 0, 3, 2, 4, 6, 5, 2, 1, 3, 0, 3, 1, 5, 2, 0, 6, 4, 2, 5, 4, 1, 0, 3, 6, 0, 6, 3, 2, 4, 5, 1, 3, 4, 5, 2, 0, 1, 6, 4, 6, 5, 3, 0, 1, 2, 6, 0, 5, 4, 2, 3, 1, 3, 1, 4, 0, 5, 6, 2, 5, 1, 3, 4, 0, 6, 2, 6, 2, 1, 4, 3, 0, 5, 5, 4, 6, 2, 0, 3, 1, 3, 2, 6, 4, 1, 5, 0, 2, 3, 0, 1, 6, 4, 5, 0, 5, 4, 6, 3, 1, 2, 5, 0, 6, 3, 1, 2, 4, 3, 4, 2, 0, 6, 5, 1, 4, 5, 3, 2, 0, 1, 6, 2, 3, 0, 4, 1, 6, 5, 6, 4, 2, 3, 1, 0, 5, 5, 0, 6, 4, 1, 2, 3, 4, 6, 1, 5, 3, 2, 0, 0, 5, 3, 1, 2, 6, 4, 1, 4, 5, 2, 0, 3, 6, 4, 1, 5, 3, 6, 0, 2, 4, 0, 2, 5, 6, 1, 3, 2, 6, 4, 5, 0, 1, 3, 5, 6, 3, 2, 0, 1, 4, 6, 2, 1, 0, 4, 3, 5, 6, 3, 2, 1, 0, 5, 4, 3, 5, 4, 2, 0, 1, 6, 3, 4, 6, 0, 1, 5, 2, 4, 1, 3, 0, 6, 5, 2, 2, 0, 1, 6, 5, 3, 4, 3, 5, 1, 4, 0, 2, 6, 4, 6, 5, 2, 0, 1, 3, 4, 1, 2, 6, 5, 0, 3, 5, 6, 1, 0, 2, 3, 4, 1, 5, 6, 3, 0, 2, 4, 6, 2, 3, 5, 4, 1, 0, 6, 2, 1, 3, 4, 5, 0, 2, 5, 6, 4, 0, 1, 3, 3, 0, 5, 1, 6, 2, 4, 2, 5, 3, 0, 4, 6, 1, 0, 3, 4, 6, 2, 5, 1, 3, 4, 0, 2, 1, 5, 6, 2, 4, 1, 5, 3, 0, 6, 5, 4, 6, 3, 2, 0, 1, 4, 1, 5, 2, 3, 0, 6, 5, 6, 0, 2, 4, 1, 3, 6, 3, 2, 1, 5, 4, 0, 4, 0, 1, 5, 6, 3, 2, 4, 0, 1, 5, 6, 3, 2, 2, 4, 5, 6, 1, 3, 0, 4, 6, 1, 5, 0, 2, 3, 5, 4, 0, 1, 3, 2, 6, 3, 4, 5, 0, 2, 6, 1, 4, 5, 6, 0, 3, 1, 2, 6, 2, 0, 1, 5, 3, 4, 1, 3, 4, 6, 0, 2, 5, 1, 6, 4, 2, 3, 5, 0, 2, 3, 5, 6, 1, 0, 4, 6, 5, 3, 1, 2, 0, 4, 2, 0, 6, 4, 1, 3, 5, 5, 0, 1, 2, 3, 6, 4, 3, 1, 5, 6, 4, 2, 0, 4, 2, 3, 1, 0, 6, 5, 0, 6, 3, 1, 4, 5, 2, 5, 6, 2, 0, 1, 3, 4, 5, 6, 1, 4, 3, 2, 0, 0, 1, 3, 4, 5, 2, 6, 2, 4, 3, 1, 6, 0, 5, 2, 3, 1, 0, 5, 4, 6, 6, 1, 3, 5, 2, 4, 0, 2, 5, 0, 1, 3, 4, 6, 2, 1, 3, 5, 6, 0, 4, 6, 3, 1, 0, 5, 2, 4, 4, 0, 3, 6, 1, 5, 2, 5, 6, 1, 4, 0, 2, 3, 4, 6, 2, 0, 1, 3, 5, 3, 1, 2, 5, 4, 0, 6, 2, 1, 4, 6, 5, 0, 3, 1, 3, 5, 2, 4, 0, 6, 5, 1, 3, 2, 0, 4, 6, 1, 0, 6, 5, 2, 4, 3, 6, 2, 1, 5, 0, 3, 4, 4, 3, 0, 2, 5, 6, 1, 0, 6, 1, 3, 4, 2, 5, 1, 5, 3, 6};

mt19937 rng(random_device{}());
struct Score
{
    double score;
    vector<vector<int>> active;
    int rotation;

    Score(double s, const vector<vector<int>> &a, int r)
        : score(s), active(a), rotation(r) {}
};
struct WeightSet
{
    double weightedBlocks;
    double connectedHoles;
    double roughness;
    double pitholePercentage;
    double clearAbleLines;
    double deepestHole;
    double blocks;
    double colHoles;
};
WeightSet weights = {
    0.3,   // weightedBlocks
    0.1,   // connectedHoles
    -0.5,  // roughness
    0.15,  // pitholePercentage
    0.5,   // clearAbleLines
    0.25,  // deepestHole
    -0.25, // blocks
    -0.75  // colHoles
};

// Helper function to get random element and remove it from vector
int getRandomAndRemove(vector<int> &vec)
{
    if (vec.empty())
        return 0;
    uniform_int_distribution<int> dist(0, vec.size() - 1);
    int index = dist(rng);
    int value = vec[index];
    vec.erase(vec.begin() + index);
    return value;
}

bool createNewPiece( bool &held, int &level, int &lines, int &score, int &shape, int &nxt, int &rot, vector<vector<bool>> &board, vector<vector<vector<int>>> &activePos, vector<vector<int>> &active, vector<int> &bag, int &counterx, int &hold)
{
    held = false;
    // Place current piece on board
    for (const auto &pos : active)
    {
        board[pos[0]][pos[1]] = true;
    }

    // Check for completed lines
    int line = 0;
    for (int i = 0; i < 20; i++)
    {
        if (all_of(board[i].begin(), board[i].end(), [](bool x)
                   { return x; }))
        {
            board.erase(board.begin() + i);
            board.insert(board.begin(), vector<bool>(10, false));
            line++;
        }
    }
    lines += line;

    // Calculate score based on lines cleared
    vector<int> lineScores = {0, 40, 100, 300, 1200};
    score += lineScores[line] * (level + 1);

    // Update level
    level = lines / 10;

    // Update current and nxt pieces
    shape = nxt;
    active = activePos[shape];

    // Refill bag if empty
    if (bag.empty())
    {
        bag = {0, 1, 2, 3, 4, 5, 6};
    }

    nxt = getRandomAndRemove(bag);
    nxt = shapeOrder[counterx];
    counterx++;
    rot = 0;

    // Check for game over
    for (const auto &pos : active)
    {
        if (board[pos[0]][pos[1]])
        {
            return false;
        }
    }
    return true;
}
pair<vector<vector<int>>, int> rotPiece( const vector<vector<bool>> &board, int shape, int rot, vector<vector<int>> act)
{

    // Check if the piece is out of bounds or overlapping
    bool broken = false;
    for (const auto &el : act)
    {
        if (el[0] < 0 || el[0] > 19 ||
            el[1] < 0 || el[1] > 9 ||
            board[el[0]][el[1]])
        {
            broken = true;
            break;
        }
    }

    if (broken)
    {
        return {act, rot};
    }

    // Rotation logic for different piece shapes
    switch (shape)
    {
    case 0:
    { // I-piece
        if (rot == 0)
        {
            if (act[1][0] > 0 && act[1][0] + 2 < 20 &&
                !board[act[1][0] - 1][act[1][1]] &&
                !board[act[1][0] + 1][act[1][1]] &&
                !board[act[1][0] + 2][act[1][1]])
            {
                act[0][0] -= 1;
                act[0][1] += 1;
                act[2][0] += 1;
                act[2][1] -= 1;
                act[3][0] += 2;
                act[3][1] -= 2;
                rot = 1;
            }
        }
        else if (rot == 1)
        {
            if (act[1][1] - 1 > 0 && act[1][1] + 1 < 10 &&
                !board[act[1][0]][act[1][1] + 1] &&
                !board[act[1][0]][act[1][1] - 1] &&
                !board[act[1][0]][act[1][1] - 2])
            {
                act[0][0] += 1;
                act[0][1] += 1;
                act[2][0] -= 1;
                act[2][1] -= 1;
                act[3][0] -= 2;
                act[3][1] -= 2;
                rot = 2;
            }
        }
        else if (rot == 2)
        {
            if (act[1][0] - 1 > 0 && act[1][0] + 2 < 20 &&
                !board[act[1][0] - 1][act[1][1]] &&
                !board[act[1][0] + 1][act[1][1]] &&
                !board[act[1][0] - 2][act[1][1]])
            {
                act[0][0] += 1;
                act[0][1] -= 1;
                act[2][0] -= 1;
                act[2][1] += 1;
                act[3][0] -= 2;
                act[3][1] += 2;
                rot = 3;
            }
        }
        else if (rot == 3)
        {
            if (act[1][1] > 0 && act[1][1] + 1 < 9 &&
                !board[act[1][0]][act[1][1] + 1] &&
                !board[act[1][0]][act[1][1] - 1] &&
                !board[act[1][0]][act[1][1] + 2])
            {
                act[0][0] -= 1;
                act[0][1] -= 1;
                act[2][0] += 1;
                act[2][1] += 1;
                act[3][0] += 2;
                act[3][1] += 2;
                rot = 0;
            }
        }
        break;
    }
    case 1:
    { // L-piece
        if (rot == 0)
        {
            if (act[2][0] < 19 &&
                !board[act[2][0] - 1][act[2][1] + 1] &&
                !board[act[2][0] - 1][act[2][1]] &&
                !board[act[2][0] + 1][act[2][1]])
            {
                act[0][1] += 2;
                act[1][0] -= 1;
                act[1][1] += 1;
                act[3][0] += 1;
                act[3][1] -= 1;
                rot = 1;
            }
        }
        else if (rot == 1)
        {
            if (act[2][1] > 0 &&
                !board[act[2][0] + 1][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] - 1])
            {
                act[0][0] += 2;
                act[1][0] += 1;
                act[1][1] += 1;
                act[3][0] -= 1;
                act[3][1] -= 1;
                rot = 2;
            }
        }
        else if (rot == 2)
        {
            if (act[2][0] > 0 &&
                !board[act[2][0] + 1][act[2][1] - 1] &&
                !board[act[2][0] + 1][act[2][1]] &&
                !board[act[2][0] - 1][act[2][1]])
            {
                act[0][1] -= 2;
                act[1][0] += 1;
                act[1][1] -= 1;
                act[3][0] -= 1;
                act[3][1] += 1;
                rot = 3;
            }
        }
        else if (rot == 3)
        {
            if (act[2][1] < 9 &&
                !board[act[2][0] - 1][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] + 1])
            {
                act[0][0] -= 2;
                act[1][0] -= 1;
                act[1][1] -= 1;
                act[3][0] += 1;
                act[3][1] += 1;
                rot = 0;
            }
        }
        break;
    }
    case 2:
    { // J-piece
        if (rot == 0)
        {
            if (act[2][0] < 19 &&
                !board[act[2][0] - 1][act[2][1] - 1] &&
                !board[act[2][0] - 1][act[2][1]] &&
                !board[act[2][0] + 1][act[2][1]])
            {
                act[0][0] += 2;
                act[1][0] += 1;
                act[1][1] -= 1;
                act[3][0] -= 1;
                act[3][1] += 1;
                rot = 1;
            }
        }
        else if (rot == 1)
        {
            if (act[2][1] > 0 &&
                !board[act[2][0] + 1][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] + 1])
            {
                act[0][1] -= 2;
                act[1][0] -= 1;
                act[1][1] -= 1;
                act[3][0] += 1;
                act[3][1] += 1;
                rot = 2;
            }
        }
        else if (rot == 2)
        {
            if (act[2][0] > 0 &&
                !board[act[2][0] - 1][act[2][1] + 1] &&
                !board[act[2][0] - 1][act[2][1]] &&
                !board[act[2][0] + 1][act[2][1]])
            {
                act[0][0] -= 2;
                act[1][0] -= 1;
                act[1][1] += 1;
                act[3][0] += 1;
                act[3][1] -= 1;
                rot = 3;
            }
        }
        else if (rot == 3)
        {
            if (act[2][1] < 9 &&
                !board[act[2][0] + 1][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] - 1])
            {
                act[0][1] += 2;
                act[1][0] += 1;
                act[1][1] += 1;
                act[3][0] -= 1;
                act[3][1] -= 1;
                rot = 0;
            }
        }
        break;
    }
    case 3:
    { // Square piece
        // No rotation for square piece
        break;
    }
    case 4:
    { // S-piece
        if (rot == 0)
        {
            if (act[2][0] < 19 &&
                !board[act[2][0] - 1][act[2][1] + 1] &&
                !board[act[2][0] - 1][act[2][1]] &&
                !board[act[2][0]][act[2][1] - 1])
            {
                act[0][0] += 1;
                act[0][1] += 1;
                act[1][0] += 2;
                act[3][0] -= 1;
                act[3][1] += 1;
                rot = 1;
            }
        }
        else if (rot == 1)
        {
            if (act[2][1] > 0 &&
                !board[act[2][0] + 1][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] - 1] &&
                !board[act[2][0] - 1][act[2][1]])
            {
                act[0][0] += 1;
                act[0][1] -= 1;
                act[1][1] -= 2;
                act[3][0] += 1;
                act[3][1] += 1;
                rot = 2;
            }
        }
        else if (rot == 2)
        {
            if (act[2][0] > 0 &&
                !board[act[2][0] + 1][act[2][1] - 1] &&
                !board[act[2][0] + 1][act[2][1]] &&
                !board[act[2][0]][act[2][1] + 1])
            {
                act[0][0] -= 1;
                act[0][1] -= 1;
                act[1][0] -= 2;
                act[3][0] += 1;
                act[3][1] -= 1;
                rot = 3;
            }
        }
        else if (rot == 3)
        {
            if (act[2][1] < 9 &&
                !board[act[2][0] - 1][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] + 1] &&
                !board[act[2][0] + 1][act[2][1]])
            {
                act[0][0] -= 1;
                act[0][1] += 1;
                act[1][1] += 2;
                act[3][0] -= 1;
                act[3][1] -= 1;
                rot = 0;
            }
        }
        break;
    }
    case 5:
    { // Z-piece
        if (rot == 0)
        {
            if (act[2][0] < 19 &&
                !board[act[2][0] - 1][act[2][1] + 1] &&
                !board[act[2][0] - 1][act[2][1]] &&
                !board[act[2][0] + 1][act[2][1]])
            {
                act[0][1] += 2;
                act[1][0] += 1;
                act[1][1] += 1;
                act[3][0] += 1;
                act[3][1] -= 1;
                rot = 1;
            }
        }
        else if (rot == 1)
        {
            if (act[2][1] > 0 &&
                !board[act[2][0] + 1][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] - 1])
            {
                act[0][0] += 2;
                act[1][0] += 1;
                act[1][1] -= 1;
                act[3][0] -= 1;
                act[3][1] -= 1;
                rot = 2;
            }
        }
        else if (rot == 2)
        {
            if (act[2][0] > 0 &&
                !board[act[2][0] + 1][act[2][1] - 1] &&
                !board[act[2][0] + 1][act[2][1]] &&
                !board[act[2][0] - 1][act[2][1]])
            {
                act[0][1] -= 2;
                act[1][0] -= 1;
                act[1][1] -= 1;
                act[3][0] -= 1;
                act[3][1] += 1;
                rot = 3;
            }
        }
        else if (rot == 3)
        {
            if (act[2][1] < 9 &&
                !board[act[2][0] - 1][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] + 1])
            {
                act[0][0] -= 2;
                act[1][0] -= 1;
                act[1][1] += 1;
                act[3][0] += 1;
                act[3][1] += 1;
                rot = 0;
            }
        }
        break;
    }
    case 6:
    { // T-piece
        if (rot == 0)
        {
            if (act[2][0] < 19 &&
                !board[act[2][0] - 1][act[2][1] - 1] &&
                !board[act[2][0] - 1][act[2][1]] &&
                !board[act[2][0] + 1][act[2][1]])
            {
                act[0][0] += 1;
                act[0][1] += 1;
                act[1][0] -= 1;
                act[1][1] += 1;
                act[3][0] += 1;
                act[3][1] -= 1;
                rot = 1;
            }
        }
        else if (rot == 1)
        {
            if (act[2][1] > 0 &&
                !board[act[2][0] + 1][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] + 1] &&
                !board[act[2][0]][act[2][1] - 1])
            {
                act[0][0] += 1;
                act[0][1] -= 1;
                act[1][0] += 1;
                act[1][1] += 1;
                act[3][0] -= 1;
                act[3][1] -= 1;
                rot = 2;
            }
        }
        else if (rot == 2)
        {
            if (act[2][0] > 0 &&
                !board[act[2][0] + 1][act[2][1] + 1] &&
                !board[act[2][0] + 1][act[2][1]] &&
                !board[act[2][0] - 1][act[2][1]])
            {
                act[0][0] -= 1;
                act[0][1] -= 1;
                act[1][0] += 1;
                act[1][1] -= 1;
                act[3][0] -= 1;
                act[3][1] += 1;
                rot = 3;
            }
        }
        else if (rot == 3)
        {
            if (act[2][1] < 9 &&
                !board[act[2][0] - 1][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] - 1] &&
                !board[act[2][0]][act[2][1] + 1])
            {
                act[0][0] -= 1;
                act[0][1] += 1;
                act[1][0] -= 1;
                act[1][1] -= 1;
                act[3][0] += 1;
                act[3][1] += 1;
                rot = 0;
            }
        }
        break;
    }
    }
    return {act, rot};
}


double analyze(const vector<vector<bool>> &board)
{
    double weightedBlocks = 0;
    double connectedHoles = 0;
    double roughness = 0;
    double pitholePercentage = 0;
    double clearAbleLines = 0;
    double deepestHole = 0;
    double blocks = 0;
    double colHoles = 0;

    // Weighted blocks, connected holes, deepest hole, and column holes
    for (int i = 0; i < 10; i++)
    {
        bool hole = false;
        int holeDepth = 0;
        bool columnBlock = false;
        int height = 0;

        for (int j = 0; j < 20; j++)
        {
            if (board[j][i])
            {
                weightedBlocks += j;
                height = j;
                columnBlock = true;
                blocks++;
            }
            else if (columnBlock)
            {
                connectedHoles++;
                hole = true;
                holeDepth++;
            }

            if (hole)
            {
                deepestHole = max(deepestHole, (double)holeDepth);
            }
        }

        if (hole)
        {
            colHoles++;
        }
    }

    // Roughness (height differences between adjacent columns)
    for (int i = 0; i < 19; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (board[i][j] && !board[i + 1][j])
            {
                roughness++;
            }
        }
    }

    // Pit and hole calculation
    int pits = 0;
    int holes = 0;
    for (int i = 0; i < 10; i++)
    {
        bool hole = false;
        for (int j = 0; j < 20; j++)
        {
            if (!board[j][i])
            {
                hole = true;
            }
            else if (hole)
            {
                holes++;
            }
        }
    }

    for (int i = 0; i < 10; i++)
    {
        bool hole = false;
        for (int j = 0; j < 20; j++)
        {
            if (!board[j][i])
            {
                hole = true;
            }
            else if (hole)
            {
                pits++;
            }
        }
    }

    // Pit hole percentage
    pitholePercentage = holes > 0 ? (double)pits / (pits + holes) : 0;

    // Clearable lines
    for (int i = 0; i < 20; i++)
    {
        bool clear = true;
        for (int j = 0; j < 10; j++)
        {
            if (!board[i][j])
            {
                clear = false;
                break;
            }
        }
        if (clear)
        {
            clearAbleLines++;
        }
    }

    // Calculate final score
    double score =
        weights.weightedBlocks * weightedBlocks +
        weights.connectedHoles * connectedHoles +
        weights.roughness * roughness +
        weights.pitholePercentage * pitholePercentage +
        weights.clearAbleLines * clearAbleLines +
        weights.deepestHole * deepestHole +
        weights.blocks * blocks +
        weights.colHoles * colHoles;

    return score;
}



// IDK C++ that well so i made python like deepcopy function
vector<vector<int>> deepcopy(const vector<vector<int>> &vec)
{
    return vector<vector<int>>(vec);
}

// Main automation function
pair<double, vector<vector<int>>> automate( vector<vector<bool>> &board, vector<vector<int>> &active, int shape, int rot)
{
    auto tempBoard = board;
    auto tempActive = active;
    int tempRot = rot;
    int tempShape = shape;
    vector<Score> scores;

    for (int rotationCount = 0; rotationCount < 4; rotationCount++)
    {
        // Move piece down until it hits bottom or another piece
        while (
            tempActive[0][1] != 0 &&
            tempActive[1][1] != 0 &&
            tempActive[2][1] != 0 &&
            tempActive[3][1] != 0 &&
            !board[tempActive[0][0]][tempActive[0][1] - 1] &&
            !board[tempActive[1][0]][tempActive[1][1] - 1] &&
            !board[tempActive[2][0]][tempActive[2][1] - 1] &&
            !board[tempActive[3][0]][tempActive[3][1] - 1])
        {
            for (auto &piece : tempActive)
            {
                piece[1]--;
            }
        }

        auto tempActive1 = deepcopy(tempActive);
        auto bact = deepcopy(tempActive);

        // Try all possible horizontal positions
        while (
            tempActive1[0][1] < 10 &&
            tempActive1[1][1] < 10 &&
            tempActive1[2][1] < 10 &&
            tempActive1[3][1] < 10 &&
            (!(
                 tempActive1[0][1] < 9 &&
                 tempActive1[1][1] < 9 &&
                 tempActive1[2][1] < 9 &&
                 tempActive1[3][1] < 9) ||
             (!board[tempActive1[0][0]][tempActive1[0][1] + 1] &&
              !board[tempActive1[1][0]][tempActive1[1][1] + 1] &&
              !board[tempActive1[2][0]][tempActive1[2][1] + 1] &&
              !board[tempActive1[3][0]][tempActive1[3][1] + 1])))
        {
            auto temp = deepcopy(tempActive1);
            auto tempB = tempBoard;

            // Drop piece to bottom
            while (
                temp[0][0] < 19 &&
                temp[1][0] < 19 &&
                temp[2][0] < 19 &&
                temp[3][0] < 19 &&
                !tempB[temp[0][0] + 1][temp[0][1]] &&
                !tempB[temp[1][0] + 1][temp[1][1]] &&
                !tempB[temp[2][0] + 1][temp[2][1]] &&
                !tempB[temp[3][0] + 1][temp[3][1]])
            {
                for (auto &piece : temp)
                {
                    piece[0]++;
                }
            }

            // Place piece on board
            for (const auto &piece : temp)
            {
                tempB[piece[0]][piece[1]] = true;
            }

            scores.emplace_back(analyze(tempB), deepcopy(tempActive1), tempRot);

            // Move piece right
            for (auto &piece : tempActive1)
            {
                piece[1]++;
            }
        }

        tempActive = deepcopy(bact);
        int prev_rot = tempRot;

        // Try all possible rotations
        for (int i = 0; i < 5; i++)
        {
            if (prev_rot == tempRot)
            {
                tempActive = deepcopy(bact);

                if (shape == 0)
                {
                    auto applyOffset = [&](const vector<pair<int, int>> &offsets)
                    {
                        auto newActive = tempActive;
                        for (size_t j = 0; j < newActive.size(); j++)
                        {
                            newActive[j][0] += offsets[j].first;
                            newActive[j][1] += offsets[j].second;
                        }
                        return rotPiece(board, shape, tempRot, newActive);
                    };

                    switch (i)
                    {
                    case 0:
                    {
                        tie(tempActive, tempRot) = rotPiece(board, shape, tempRot, tempActive);
                        break;
                    }
                    case 1:
                    {
                        vector<pair<int, int>> offsets;
                        if (tempRot == 0)
                            offsets = {{0, -2}, {0, -2}, {0, -2}, {0, -2}};
                        else if (tempRot == 1)
                            offsets = {{0, -1}, {0, -1}, {0, -1}, {0, -1}};
                        else if (tempRot == 2)
                            offsets = {{0, 2}, {0, 2}, {0, 2}, {0, 2}};
                        else
                            offsets = {{0, 1}, {0, 1}, {0, 1}, {0, 1}};
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    case 2:
                    {
                        vector<pair<int, int>> offsets;
                        if (tempRot == 3)
                            offsets = {{0, -2}, {0, -2}, {0, -2}, {0, -2}};
                        else if (tempRot == 2)
                            offsets = {{0, -1}, {0, -1}, {0, -1}, {0, -1}};
                        else if (tempRot == 1)
                            offsets = {{0, 2}, {0, 2}, {0, 2}, {0, 2}};
                        else
                            offsets = {{0, 1}, {0, 1}, {0, 1}, {0, 1}};
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    case 3:
                    {
                        vector<pair<int, int>> offsets;
                        if (tempRot == 0)
                            offsets = {{-1, -2}, {-1, -2}, {-1, -2}, {-1, -2}};
                        else if (tempRot == 1)
                            offsets = {{2, -1}, {2, -1}, {2, -1}, {2, -1}};
                        else if (tempRot == 2)
                            offsets = {{1, 2}, {1, 2}, {1, 2}, {1, 2}};
                        else
                            offsets = {{-2, 1}, {-2, 1}, {-2, 1}, {-2, 1}};
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    case 4:
                    {
                        vector<pair<int, int>> offsets;
                        if (tempRot == 0)
                            offsets = {{2, 1}, {2, 1}, {2, 1}, {2, 1}};
                        else if (tempRot == 1)
                            offsets = {{-1, 2}, {-1, 2}, {-1, 2}, {-1, 2}};
                        else if (tempRot == 2)
                            offsets = {{-2, -1}, {-2, -1}, {-2, -1}, {-2, -1}};
                        else
                            offsets = {{1, -2}, {1, -2}, {1, -2}, {1, -2}};
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    }
                }
                else
                {
                    auto applyOffset = [&](const vector<pair<int, int>> &offsets)
                    {
                        auto newActive = tempActive;
                        for (size_t j = 0; j < newActive.size(); j++)
                        {
                            newActive[j][0] += offsets[j].first;
                            newActive[j][1] += offsets[j].second;
                        }
                        return rotPiece(board, shape, tempRot, newActive);
                    };

                    switch (i)
                    {
                    case 0:
                    {
                        tie(tempActive, tempRot) = rotPiece(board, shape, tempRot, tempActive);
                        break;
                    }
                    case 1:
                    {
                        vector<pair<int, int>> offsets(4);
                        for (auto &offset : offsets)
                        {
                            offset = {0, (tempRot == 0 || tempRot == 3) ? -1 : 1};
                        }
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    case 2:
                    {
                        vector<pair<int, int>> offsets;
                        if (tempRot == 0)
                            offsets = {{1, -1}, {1, -1}, {1, -1}, {1, -1}};
                        else if (tempRot == 1)
                            offsets = {{-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}};
                        else if (tempRot == 2)
                            offsets = {{1, 1}, {1, 1}, {1, 1}, {1, 1}};
                        else
                            offsets = {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}};
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    case 3:
                    {
                        vector<pair<int, int>> offsets(4);
                        for (auto &offset : offsets)
                        {
                            offset = {(tempRot == 0 || tempRot == 2) ? -2 : 2, 0};
                        }
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    case 4:
                    {
                        vector<pair<int, int>> offsets;
                        if (tempRot == 0)
                            offsets = {{-2, -1}, {-2, -1}, {-2, -1}, {-2, -1}};
                        else if (tempRot == 1)
                            offsets = {{2, 1}, {2, 1}, {2, 1}, {2, 1}};
                        else if (tempRot == 2)
                            offsets = {{-2, 1}, {-2, 1}, {-2, 1}, {-2, 1}};
                        else
                            offsets = {{2, -1}, {2, -1}, {2, -1}, {2, -1}};
                        tie(tempActive, tempRot) = applyOffset(offsets);
                        break;
                    }
                    }
                }
            }
        }

        if (prev_rot == tempRot)
        {
            tempActive = deepcopy(bact);
        }
    }

    // Find best score
    if (scores.empty())
    {
        return {0, active};
    }

    auto maxScore = max_element(scores.begin(), scores.end(),
                                [](const Score &a, const Score &b)
                                { return a.score < b.score; });
    return {maxScore->score, maxScore->active};
}

// Initialize game state
void initGame(int offset, bool &held, int &level, int &lines, int &rot, vector<int> &bag, int &score, int &counterx, vector<vector<bool>> &board, int &hold, int &shape, int &nxt, vector<vector<int>> &active, vector<vector<vector<int>>> activePos)
{
    held = false;
    level = 0;
    lines = 0;
    rot = 0;
    bag = {0, 1, 2, 3, 4, 5, 6};
    score = 0;
    counterx = 3;
    vector<vector<bool>> newBoard(20, vector<bool>(10, false));
    board = newBoard;
    hold = getRandomAndRemove(bag);
    shape = getRandomAndRemove(bag);
    nxt = getRandomAndRemove(bag);
    hold = shapeOrder[offset + 0];
    shape = shapeOrder[offset + 1];
    nxt = shapeOrder[offset + 2];
    active = activePos[shape];
}

void simx(int i, int &totalScore)
{
    vector<vector<int>> active;
    int hold, shape, nxt;
    bool held = false;
    int level = 0;
    int lines = 0;
    int rot = 0;
    int score = 0;
    int counterx = 3;
    vector<int> bag = {0, 1, 2, 3, 4, 5, 6};

    vector<vector<vector<int>>> activePos = {
        {{0, 3}, {0, 4}, {0, 5}, {0, 6}},
        {{0, 3}, {1, 3}, {1, 4}, {1, 5}},
        {{0, 5}, {1, 5}, {1, 4}, {1, 3}},
        {{0, 4}, {0, 5}, {1, 4}, {1, 5}},
        {{0, 4}, {0, 5}, {1, 4}, {1, 3}},
        {{0, 3}, {0, 4}, {1, 4}, {1, 5}},
        {{0, 4}, {1, 3}, {1, 4}, {1, 5}}};
    vector<vector<bool>> board(20, vector<bool>(10, false));
    initGame(i * 1000,
             held,
             level,
             lines,
             rot,
             bag,
             score,
             counterx,
             board,
             hold,
             shape,
             nxt,
             active,
             activePos);

    bool move = false;
    while (counterx < 1000 * (i + 1))
    {
        auto [scr, newActive] = automate(board, active, shape, rot);
        auto tempActive = deepcopy(activePos[hold]);
        auto [scr2, active2] = automate(board, tempActive, hold, 0);
        if (scr2 > scr)
        {
            active = active2;
            int temp = shape;
            shape = hold;
            rot = 0;
            hold = temp;
        }
        else
        {
            active = newActive;
        }
        while (
            active[0][0] < 19 &&
            active[1][0] < 19 &&
            active[2][0] < 19 &&
            active[3][0] < 19 &&
            !board[active[0][0] + 1][active[0][1]] &&
            !board[active[1][0] + 1][active[1][1]] &&
            !board[active[2][0] + 1][active[2][1]] &&
            !board[active[3][0] + 1][active[3][1]])
        {
            for (auto &piece : active)
            {
                piece[0] += 1;
            }
        }
        if (!createNewPiece(held, level, lines, score, shape, nxt, rot, board, activePos, active, bag, counterx, hold))
        {
            break;
        }
    }
    totalScore += score;
}
int activateSimulation(WeightSet weight)
{
    weights = weight;
    int totalScore = 0;
    vector<std::thread> threads;
    for (int i = 0; i < 1; i++)
    {
        threads.emplace_back(simx, i, std::ref(totalScore));
    }
    for (auto &thread : threads)
    {
        thread.join();
    }
    // cout << "Score: " << totalScore << endl;
    return (totalScore / 10);
}
#endif